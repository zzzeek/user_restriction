- name: "{{ application_name }}: see if puppet config for application exists"
  stat:
    path: "{{ openstack_controller_puppet_generated }}/{{ config_data.puppet_config_name }}"
  register: puppet_config_stat

- name: "{{ application_name }}: not present on controllers"
  set_fact:
    config_locations: "{{ config_locations | combine( {application_name: {'present': false} | combine(config_locations[application_name])}) }}"
  when: not puppet_config_stat.stat.exists or (include_only_confs | length > 0 and application_name not in include_only_confs)

- block:
    - name: "{{ application_name }}: set controller location for account_per_controller.cnf"
      set_fact:
        controller_account_per_controller: "{{ openstack_controller_puppet_generated }}/{{ config_data.puppet_config_name }}/etc/my.cnf.d/account_per_controller.cnf"
        container_account_per_controller: "/etc/my.cnf.d/account_per_controller.cnf"

    - name: "{{ application_name }}: find a container image we can use to run commands"
      shell: |
        {{ container_cli }} ps --format \{\{'.Image'\}\} --filter name={{ config_data.containers[0] }}
      register: container_command_output

    - name: "{{ application_name }}: determine a script runner docker image"
      set_fact:
        container_image: "{{ container_command_output.stdout_lines[0] }}"
        script_runner: "{{ container_cli }} run --network=host -i -u root -v '{{ openstack_controller_puppet_generated }}/{{ config_data.puppet_config_name }}:{{ openstack_controller_puppet_generated }}/{{ config_data.puppet_config_name }}' {{ container_command_output.stdout_lines[0] }}"

    - name: "{{ application_name }}: read tripleo-configured URL from hiera and split"
      shell: "{{ script_content }}"
      vars:
        script_content: |
          URL=`hiera -c /etc/puppet/hiera.yaml "{{ config_data.hiera }}"`
          if [[ "${URL}" == "nil" ]]; then
            exit -1
          fi

          cat << EOF | {{ script_runner }} python
          from __future__ import print_function
          from sqlalchemy.engine import url
          u = url.make_url('${URL}')
          print("\n".join(
              ['${URL}', u.get_backend_name() or '', u.username or '', u.host or '',
               u.database, u.password, u.query.get("read_default_group", '')]
          ))
          EOF
      register: command_output

    - name: "{{ application_name }}: set existing database URL components"
      set_fact:
        ooo_db_url: "{{ command_output.stdout_lines[0] }}"
        ooo_db_backend: "{{ command_output.stdout_lines[1] }}"
        ooo_db_user: "{{ command_output.stdout_lines[2] }}"
        ooo_db_host: "{{ command_output.stdout_lines[3] }}"
        ooo_db_name: "{{ command_output.stdout_lines[4] }}"
        ooo_db_password: "{{ command_output.stdout_lines[5] }}"
        ooo_db_read_default_group: "{{ command_output.stdout_lines[6] }}"

    - name: "{{ application_name }}: read keys from all_nodes.json"
      shell: "{{ script_content }}"
      vars:
        # assumptions in this script:
        # 1. the docker/podman container names are the same names as we
        #    would see in the keys within /etc/puppet/hieradata/all_nodes.json
        # 2. not every container name is present in all_nodes, however
        #    if we retrieve short_bootstrap_node_name for one of them, it's
        #    the same name for any of them
        # 3. we don't hard-assume this but the short_bootstrap_node_name is
        #    really just one address for the whole overcloud, it's in
        #    /etc/puppet/hieradata/bootstrap_node.json.   Not sure why
        #    it's copied into many records in all_nodes.json, however we're
        #    getting it on a per-node basis anyway.
        # 4. We can retrieve the IP number of this controller node on the
        #    internal API network using the key <hostname>.internalapi
        #    in /etc/hosts
        # 5. This internalapi IP number will be one of three hosts used in
        #    the mysql.users table for this service's MySQL user name.
        #    the other two are the mysql_vip and %.
        script_content: |
          cat << EOF | python
          from __future__ import print_function
          import json

          struct = json.load(open("/etc/puppet/hieradata/all_nodes.json"))
          for possible_name in {{ config_data.containers }}:
              if "%s_short_bootstrap_node_name" % possible_name in struct:
                  bootstrap_node_name = struct["%s_short_bootstrap_node_name" % possible_name]
                  break
          else:
              raise ValueError(
                  "Could not locate bootstrap node name "
                  "for config {{ application_name }}"
              )
          print(bootstrap_node_name)

          etc_hosts_tokens = [
              (tokens[0], tokens[1:])
              for tokens in [
                  line.split() for line in open("/etc/hosts")
              ] if len(tokens) > 1
          ]
          etc_hosts_lookup = {name: ip for ip, names in etc_hosts_tokens for name in names}
          bootstrap_node_internal_ip = etc_hosts_lookup["%s.internalapi" % bootstrap_node_name]
          print(bootstrap_node_internal_ip)

          vip_struct = json.load(open("/etc/puppet/hieradata/vip_data.json"))
          mysql_vip = vip_struct["mysql_vip"]
          print(mysql_vip)
          EOF
      register: command_output

    - name: "{{ application_name }}: set hieradata controller facts"
      set_fact:
         ooo_bootstrap_controller_name: "{{ command_output.stdout_lines[0] }}"
         ooo_bootstrap_internal_ip: "{{ command_output.stdout_lines[1] }}"
         ooo_mysql_vip: "{{ command_output.stdout_lines[2] }}"


    - name: "{{ application_name }}: organized gathered data"
      set_fact:
        new_record:
          - present: true
          - container_image: "{{ container_image }}"
          - script_runner: "{{ script_runner }}"
          - controller_config_file: "{{ openstack_controller_puppet_generated }}/{{ config_data.puppet_config_name }}{{ config_data.config }}"
          - tripleo_db_url: "{{ ooo_db_url }}"
          - tripleo_db_user: "{{ ooo_db_user }}"
          - tripleo_db_host: "{{ ooo_db_host }}"
          - tripleo_db_name: "{{ ooo_db_name }}"
          - tripleo_db_password: "{{ ooo_db_password }}"
          - tripleo_db_read_default_group: "{{ ooo_db_read_default_group }}"
          - container_account_per_controller: "{{ container_account_per_controller }}"
          - controller_account_per_controller: "{{ controller_account_per_controller }}"
          - tripleo_bootstrap_controller: "{{ ooo_bootstrap_controller_name }}"
          - tripleo_bootstrap_internal_ip: "{{ ooo_bootstrap_internal_ip }}"
          - tripleo_mysql_vip: "{{ ooo_mysql_vip }}"

    - name: "{{ application_name }}: add gathered data"
      set_fact:
        config_locations: "{{ config_locations | combine( {application_name: new_record | combine(config_locations[application_name])}) }}"

  when: puppet_config_stat.stat.exists and (include_only_confs | length == 0 or application_name in include_only_confs)
