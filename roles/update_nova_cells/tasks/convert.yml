- name: read uuid/database connections to convert to apc
  # osp15 is using {scheme}://{username}:{password}@{hostname}/nova?{query}
  # {scheme}://{username}:{password}@{hostname}/nova_cell0?{query}
  # if username/pw/host is blank, SQLAlchemy URL returns blank string, not None,
  # however pymysql read_default_file will supercede these values also based
  # on https://github.com/PyMySQL/PyMySQL/blob/master/pymysql/connections.py#L224.
  # HOWEVER, nova's tokenizer is doing:
  # mysql+pymysql://None:None@None/nova?read_default_file=/etc/my.cnf.d/account_per_controller.cnf&read_default_group=nova
  # so we sort of have to hardcode

  # we will leave these URLs as is, however, we still need to
  # create the grants for nova0/1/2 to get into nova_cell0
  shell: |
      {{ mysql_cli }} "SELECT uuid, database_connection FROM nova_api.cell_mappings WHERE database_connection like '%{{ seek_host }}%' or database_connection like '%{hostname}%';"
  vars:
    - seek_host: "{{ config_locations.nova.tripleo_db_host }}"
  register: nova_cell_mappings_convert_output

- name: process cell mapping output
  set_fact:
    nova_cell_convert_urls: "{{ nova_cell_convert_urls|default([]) + [{'uuid': item.split()[0], 'url': item.split()[1]}]}}"
  with_items: "{{ nova_cell_mappings_convert_output.stdout_lines }}"

- name: "{{ application_name }}: generate new URL from tripleo_db_url"
  shell: "{{ script_content }}"
  vars:
    script_content: |
      cat << EOF | {{ script_runner }} python
      from __future__ import print_function
      from sqlalchemy.engine import url
      import re
      _url = "{{ item.url }}"

      if "{hostname}" in _url:
          # look for nova tokenized URL
          components = re.match(r'.*@{hostname}/(.+?)[\?$]', _url)
          assert components, "Could not parse url: %s" % _url
          database = components.group(1)
          u = "{scheme}:///%s?read_default_file={{ container_account_per_controller }}&read_default_group={{ use_apc_section }}" % database

      else:
          u = url.make_url(_url)
          u.username = None
          u.password = None
          u.host = None
          u.port = None
          u.query.update(read_default_file="{{ container_account_per_controller }}", read_default_group="{{ use_apc_section }}")
          database = u.database
      print("{{ item.uuid }}")
      print(database)
      print(u)
      EOF
  register: nova_cells_apc_urls_output
  with_items: "{{ nova_cell_convert_urls|default([]) }}"

- name: show me the output
  debug:
    msg: "{{ nova_cells_apc_urls_output }}"

- name: process url output
  set_fact:
    nova_cell_new_urls: "{{ nova_cell_new_urls|default([]) + [{'uuid': item.stdout_lines[0], 'database': item.stdout_lines[1], 'new_url': item.stdout_lines[2]}]}}"
  with_items: "{{ nova_cells_apc_urls_output.results }}"

- name: update URLs in database
  shell: |
      {{ mysql_cli }} "UPDATE nova_api.cell_mappings SET database_connection='{{ item.new_url }}' WHERE uuid='{{ item.uuid }}'"
  with_items: "{{ nova_cell_new_urls|default([]) }}"

- name: "{{ application_name }}: create grants for apc user"
  shell: |
    {{ mysql_cli }} "GRANT ALL PRIVILEGES ON {{ item.database }}.* TO '{{ apc_db_user }}'@'{{ apc_db_bind_address }}';"
  with_items: "{{ nova_cell_new_urls|default([]) }}"

- name: "{{ application_name }}: disable grants for ooo user"
  shell: |
    {{ mysql_cli }} "REVOKE ALL PRIVILEGES ON {{ item.database }}.* FROM '{{ tripleo_db_user }}'@'%';"
  ignore_errors: yes
  with_items: "{{ nova_cell_new_urls|default([]) }}"
  run_once: true    # triple_db_user is one per all hosts
