- name: "{{ application_name }}: see if puppet config for applcation exists"
  stat:
    path: "{{ openstack_controller_puppet_generated }}/{{ puppet_config_name }}"
  register: puppet_config_stat

- block:
    - name: "{{ application_name }}: set controller location for account_per_controller.cnf"
      set_fact:
          controller_account_per_controller: "{{ openstack_controller_puppet_generated }}/{{ puppet_config_name }}/etc/my.cnf.d/account_per_controller.cnf"

    - name: "{{ application_name }}: find a container image we can use to run commands"
      shell: |
        {{ container_cli }} ps --format \{\{'.Image'\}\} --filter name={{ containers[0] }}
      register: command_output

    - name: "{{ application_name }}: determine a script runner docker image"
      set_fact:
        container_image: "{{ command_output.stdout_lines[0] }}"
        script_runner: "{{ container_cli }} run -i -u root -v '{{ openstack_controller_puppet_generated }}/{{ puppet_config_name }}:{{ openstack_controller_puppet_generated }}/{{ puppet_config_name }}' {{ command_output.stdout_lines[0] }}"


    - name: "{{ application_name }}: read tripleo configured database URL from hiera"
      shell: |
        URL=`hiera -c /etc/puppet/hiera.yaml "{{ hiera }}"`
        if [[ "${URL}" == "nil" ]]; then
          exit -1
        else
          echo "${URL}"
        fi
      register: existing_url_command_output

    - name: "{{ application_name }}: split components from tripleo-configured URL"
      shell: "{{ script_content }}"
      vars:
        script_content: |
          cat << EOF | {{ script_runner }} python
          from __future__ import print_function
          from sqlalchemy.engine import url
          u = url.make_url('{{ existing_url_command_output.stdout_lines[0] }}')
          print("\n".join(
              [u.get_backend_name() or '', u.username or '', u.host or '',
               u.database, u.query.get("read_default_group", '')]
          ))
          EOF
      register: command_output

    - name: "{{ application_name }}: set existing database URL components"
      set_fact:
        db_backend: "{{ command_output.stdout_lines[0] }}"
        db_user: "{{ command_output.stdout_lines[1] }}"
        db_host: "{{ command_output.stdout_lines[2] }}"
        db_name: "{{ command_output.stdout_lines[3] }}"
        read_group: "{{ command_output.stdout_lines[4] }}"

    - name: "{{ application_name }}: did we make a password yet"
      shell: "{{ script_runner }} crudini --get {{ controller_account_per_controller }} {{ application_name }} password"
      register: mysql_password_file_output
      ignore_errors: yes

    - name: "{{ application_name }}: register password fact from existing"
      set_fact:
        mysql_generated_password: "{{ mysql_password_file_output.stdout_lines[0] }}"
      when: mysql_password_file_output.rc == 0

    - name: "{{ application_name }}: create new password if not exists"
      shell: "{{ mysql_cli }} 'SELECT sha2(rand(), 256)'"
      register: mysql_password_generate_output
      when: mysql_password_file_output.rc != 0

    - name: "{{ application_name }}: register password fact from generated"
      set_fact:
        mysql_generated_password: "{{ mysql_password_generate_output.stdout_lines[0] }}"
      when: mysql_password_file_output.rc != 0

    - name: "{{ application_name }}: determine new user name, derived from controller hostname"
      shell: |
          HOSTNAME=`hostname`
          CONTROLLER_IDX=`echo ${HOSTNAME} | sed 's/overcloud\|controller\|-//g'`
          NEW_USER="{{ db_user }}${CONTROLLER_IDX}"
          echo "${NEW_USER}"
      register: username_output

    - name: "{{ application_name }}: set username password facts"
      set_fact:
        db_apc_username: "{{ username_output.stdout_lines[0] }}"
        db_apc_password: "{{ mysql_generated_password }}"

    - name: "{{ application_name }}: write data to account_per_controller.cnf"
      ini_file:
        path: "{{ controller_account_per_controller }}"
        section: "{{ application_name }}"
        option: "{{ item.parameter_name }}"
        value: "{{ item.value }}"
      with_items:
        - {parameter_name: "user", value: "{{ db_apc_username }}"}
        - {parameter_name: "password", value: "{{ db_apc_password }}"}
        - {parameter_name: "host", value: "{{ local_ip_address }}"}
        - {parameter_name: "port", value: "3307"}
        - {parameter_name: "bind_address", value: "{{ local_ip_address }}"}
  when: puppet_config_stat.stat.exists

